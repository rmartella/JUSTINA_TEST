// Generated by gencpp from file planning2/GoToTaskGoal.msg
// DO NOT EDIT!


#ifndef PLANNING2_MESSAGE_GOTOTASKGOAL_H
#define PLANNING2_MESSAGE_GOTOTASKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace planning2
{
template <class ContainerAllocator>
struct GoToTaskGoal_
{
  typedef GoToTaskGoal_<ContainerAllocator> Type;

  GoToTaskGoal_()
    : goal()  {
    }
  GoToTaskGoal_(const ContainerAllocator& _alloc)
    : goal(_alloc)  {
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _goal_type;
  _goal_type goal;




  typedef boost::shared_ptr< ::planning2::GoToTaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning2::GoToTaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GoToTaskGoal_

typedef ::planning2::GoToTaskGoal_<std::allocator<void> > GoToTaskGoal;

typedef boost::shared_ptr< ::planning2::GoToTaskGoal > GoToTaskGoalPtr;
typedef boost::shared_ptr< ::planning2::GoToTaskGoal const> GoToTaskGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning2::GoToTaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning2::GoToTaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'planning2': ['/opt/codigo/ros/simulator/catkin_ws/src/planning2/devel/share/planning2/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning2::GoToTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning2::GoToTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning2::GoToTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning2::GoToTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning2::GoToTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning2::GoToTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning2::GoToTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db43ffa02e592166bb4af6702f58b8c3";
  }

  static const char* value(const ::planning2::GoToTaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb43ffa02e592166ULL;
  static const uint64_t static_value2 = 0xbb4af6702f58b8c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning2::GoToTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning2/GoToTaskGoal";
  }

  static const char* value(const ::planning2::GoToTaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning2::GoToTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
geometry_msgs/Point32 goal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::planning2::GoToTaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning2::GoToTaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GoToTaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning2::GoToTaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning2::GoToTaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING2_MESSAGE_GOTOTASKGOAL_H
